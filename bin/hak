#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'colorize'
require 'highline'

program :name, 'hak'
program :version, '0.5.1'
program :description, 'Hak - A Docker powered website manager for OSX'

default_command :help

command :install do |c|
  c.syntax = 'hak install'
  c.summary = 'installs the hak environment'
  c.description = 'installs docker and sets up the entire docker based environment along with proxy'
  c.example 'description', 'hak install'
  c.action do |args, options|

    # if ~/.hak not exists, initialize it
    puts "checking to see if ~/.hak exists".blue
    if !Dir.exists?(File.expand_path('~/.hak'))
      puts "- creating ~/.hak".light_blue
      system "mkdir -p ~/.hak/packages"

      # install required dependencies 
      puts "- installing docker, docker-machine, docker-compose, xhyve, wget".light_blue

      # re-install docker
      system "brew upgrade dinghy docker docker-machine docker-compose wget docker-machine-driver-xhyve"
      system "brew tap codekitchen/dinghy"
      system "brew install dinghy"
      system "brew install docker docker-machine docker-compose wget"
      system "brew install docker-machine-driver-xhyve"
      system "brew link --overwrite docker-machine"
      system "sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve"
      system "sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve"
      system "dinghy create --provider xhyve"

    else
      puts "- it exists, skipping".blue
    end

    # check if Docker env variables are set and from which SHELL
    puts "checking your shell:".blue
    shell = `echo $SHELL`.strip    
    puts "- #{shell} detected".blue

    puts "checking if docker environmental variables are set:".blue
    if shell == '/bin/zsh'
      docker_env_exist = `fgrep "export DOCKER_MACHINE_NAME=dinghy" ~/.zshrc |wc -l`.to_i
      if docker_env_exist == 0
        puts '- not set, type:'.yellow
        puts "echo 'eval $(dinghy env)' >> ~/.zshrc"
      end
    end

    if shell == '/bin/bash'
      docker_env_exist = `fgrep "export DOCKER_MACHINE_NAME=dinghy" ~/.bash_profile |wc -l`.to_i
      if docker_env_exist == 0
        puts '- not set, type:'.yellow
        puts "echo 'eval $(dinghy env)' >> ~/.bash_profile"
      end
    end    

    puts "to power on hak, type:".yellow
    puts "  hak on"

  end
end

command :uninstall do |c|
  c.syntax = 'hak destroy'
  c.summary = 'destroys hak server'
  c.description = 'shuts off and destroys the hak server'
  c.example 'description', 'hak destroy'
  c.action do |args, options|
    system "dinghy halt"
    system "dinghy destroy"
    system "rm -rf ~/.hak"
    system "rm -rf ~/.dinghy"
  end
end

command :on do |c|
  c.syntax = 'hak on'
  c.summary = 'powers on the hak server'
  c.description = 'powers on the hak server'
  c.example 'description', 'hak on'
  c.action do |args, options|
    # start up
    system "dinghy up"
  end
end

command :off do |c|
  c.syntax = 'hak off'
  c.summary = 'shuts off hak server'
  c.description = 'shuts off the hak server'
  c.example 'description', 'hak off'
  c.action do |args, options|
    system "dinghy halt"
  end
end

command :pull do |c|
  c.syntax = 'hak pull jaequery/honeybadger'
  c.summary = 'downloads framework'
  c.description = ''
  c.example 'description', 'hak pull jaequery/honeybadger'
  c.action do |args, options|

    if !Dir.exists?(File.expand_path("~/.hak"))
      system "mkdir ~/.hak"
    end

    if args.empty?
      repo = "jaequery/honeybadger"
      package_author = "jaequery"
      package = "honeybadger"
      puts "Pulling #{repo}"
    else
      repo = args[0]
      package_author = repo.split("/")[0]
      package = repo.split("/")[1]
    end

    system "cd ~/.hak && rm -rf #{repo} && mkdir -p #{repo} && cd #{repo} && wget https://github.com/#{repo}/archive/master.zip && unzip master.zip && rm -f master.zip && mv #{package}-master/* . && rm -r #{package}-master"
  end
end

command :get do |c|
  c.syntax = 'hak get jaequery/react-starter'
  c.summary = 'creates site'
  c.description = ''
  c.example 'description', 'hak get jaequery/react-starter'
  c.action do |args, options|

    if args.empty?
      puts "type one of the following to get started: "
      puts "hak get jaequery/react-starter"
      puts "hak get jaequery/honeybadger"
      puts " "
      puts "for more hak-ready packages, check out https://hak.sh/"

    else
      repo = args[0]      
      folder = args[1]
      package_author = repo.split("/")[0]
      package = repo.split("/")[1]

      # if second argument not passed, it uses the git repo's project name
      if folder.nil?
        folder = package
      end

      # downloads package from github
      system "mkdir -p #{folder} && cd #{folder} && wget https://github.com/#{repo}/archive/master.zip && unzip master.zip && rm -f master.zip && mv #{package}-master/* #{package}-master/.* . && rm -r #{package}-master"

      # copies the package from local ~/.hak/[repo] to local folder
      #puts "copying ~/.hak/#{repo} to ./#{folder}"
      #system "cp -Rfp ~/.hak/#{repo} #{folder}"

      # rename virtual host to app name
      file_path = "#{folder}/docker-compose.yml"
      file = File.open(file_path, "r+")
      content = file.read
      host = "#{folder}.docker"
      new_content = content.gsub(/VIRTUAL_HOST=(.*?)\n/, "VIRTUAL_HOST=#{host}\n")
      File.write(file_path, new_content)    

      puts "now type:".yellow
      puts "cd #{folder}"
      puts "hak start"
      puts "site should be viewable at http://#{host}/".green

    end

  end
end

command :start do |c|
  c.syntax = 'hak start'
  c.summary = 'starts up site'
  c.description = 'this starts up the website'
  c.example 'description', 'hak start'
  c.action do |args, options|
    run "docker-compose up -d && docker-compose logs -f"
  end
end

command :stop do |c|
  c.syntax = 'hak stop'
  c.summary = 'stops site'
  c.description = 'stops the site'
  c.example 'description', 'hak stop'
  c.action do |args, options|
    run "docker-compose stop"
  end
end

command :restart do |c|
  c.syntax = 'hak restart'
  c.summary = 'restarts site'
  c.description = 'restarts the site'
  c.example 'description', 'hak restart'
  c.action do |args, options|
    run "docker-compose stop"
    run "docker-compose up -d && docker-compose logs -f"
  end
end

command :rm do |c|
  c.syntax = 'hak rm'
  c.summary = 'deletes docker containers for the project'
  c.description = 'deletes docker containers for the project'
  c.example 'description', 'hak rm'
  c.action do |args, options|
    run "docker-compose stop && docker-compose rm -f --all"
  end
end

command :logs do |c|
  c.syntax = 'hak logs'
  c.summary = 'shows the application logs'
  c.description = ''
  c.example 'description', 'hak logs'
  c.action do |args, options|
    run "docker-compose logs -f"
  end
end

command :ssh do |c|

  c.syntax = 'hak ssh'
  c.summary = 'ssh to your app'
  c.description = ''
  c.example 'description', 'hak ssh [app]'
  c.action do |args, options|

    file_name = 'docker-compose.yml'
    config_options = YAML.load_file(file_name)
    app = ''
    apps = []
    config_options.each do |key, value|
        apps << key
    end

    if args.empty?
      puts "choose one:"
      puts apps
      #app = apps[0]
    else
      app = args[0]
      run "docker-compose run #{app} bash"
    end

  end

end

command :ps do |c|
  c.syntax = 'hak ps'
  c.summary = 'lists your running websites'
  c.description = ''
  c.example 'description', 'hak ps'
  c.action do |args, options|
    container_names = run('docker ps --format "{{.Names}}"', true)
    lines = container_names.lines
    dinghy_running = false
    sites = lines.map do |line|
      name = line.split('_')[0]
      if name == 'dinghy'
        dinghy_running = true
        "proxy"
      else
        name
      end
    end

    if dinghy_running == true
      puts sites.uniq
    else
      puts "hak is off, turn it on first by typing:"
      puts "hak on"
    end

  end
end

command :upgrade do |c|
  c.syntax = 'hak upgrade'
  c.summary = 'upgrades hak and dinghy'
  c.description = ''
  c.example 'description', 'hak upgrade'
  c.action do |args, options|
    system "gem update hak"
    run "dinghy upgrade"
  end
end

command :deploy do |c|
  c.syntax = 'hak deploy jae@someserver.com'
  c.summary = 'deploys current site'
  c.description = ''
  c.example 'description', 'hak deploy jae@someserver.com'
  c.action do |args, options|

    dest = args[0]
    dest_docker_installed = true

    if args.empty?
      puts "ex: hak deploy jae@someserver.com".yellow
    else

      # get app name, make sure hak deploy is run from root of your app
      pwd = `pwd`
      dirs = pwd.split("/")
      app = dirs[dirs.length - 1].strip

      # check if docker-compose-production.yml is there
      res = `ls -l |grep docker-compose-production.yml`
      if res == ""
        puts "docker-compose-production file not exists".red
        puts "copying docker-compose.yml to docker-compose-production.yml".green
        domain = ask "what domain do you want to use? ex) myawesomesite.com".light_blue
        puts "#{domain} set in docker-compose-production.yml"
        system "cp docker-compose.yml docker-compose-production.yml"

        # rename virtual host to new domain name
        file_path = "docker-compose-production.yml"
        file = File.open(file_path, "r+")
        content = file.read
        host = domain
        new_content = content.gsub(/VIRTUAL_HOST=(.*?)\n/, "VIRTUAL_HOST=#{host}\n")
        File.write(file_path, new_content)

      end

      # check if docker is installed
      res = `ssh #{dest} which docker`.strip
      if res == ""
        dest_docker_installed = false    
      end

      # check if docker-compose is installed
      res = `ssh #{dest} which docker-compose`.strip
      if res == ""
        dest_docker_installed = false    
      end      


      # if docker and/or docker-compose is not installed in dest server, install it
      if dest_docker_installed == false
        res = `ssh #{dest} "curl -s https://gist.githubusercontent.com/jaequery/d61ce5371068bc4b386e80b120e8f217/raw/6f14fb1a373335606e86e76627a2debfb8737ab3/install_latest_docker_compose.sh | bash /dev/stdin"`
      end

      # add user to docker group if not root
      user = `ssh #{dest} whoami`.strip
      if res != "root"
        system "ssh #{dest} sudo usermod -aG docker #{user}"
      end

      # if jwilder/nginx-proxy is not running, run it
      res = `ssh #{dest} docker ps |grep jwilder/nginx-proxy`.strip
      if res == ""
        res = `ssh #{dest} "docker run -d --restart=always -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro --name=proxy jwilder/nginx-proxy"`
      end

      # deploy to dest
      #res = `rsync -avzr ../#{app} #{dest}:~/sites/` 
      #res = `ssh #{dest} \"cd ~/sites/#{app} && docker-compose stop && docker-compose up && docker-compose logs -f\"`
      puts "rsyncing from ../#{app} to #{dest}:~/sites/ ... ".yellow
      res = `rsync -avzr ../#{app} #{dest}:~/sites/`
      puts "rsync done".green

      puts "running docker-compose -f docker-compose-production.yml up".yellow
      res = `ssh #{dest} "cd ~/sites/#{app} && docker-compose stop && docker-compose -f docker-compose-production.yml up && docker-compose logs"`
      puts "all up and running!".green
      
    end

  end
end


def run(command, hide=false)
  exec = "#{command}"

  if hide
    res = `#{exec}`
  else
    res = system exec
  end

  return res
end
