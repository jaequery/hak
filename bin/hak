#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'

program :name, 'hakberry'
program :version, '0.2.0'
program :description, 'Hakberry - a Ruby hackathon starter'

default_command :help

command :pull do |c|
  c.syntax = 'hak pull jaequery/honeybadger'
  c.summary = 'downloads framework'
  c.description = ''
  c.example 'description', 'hak pull jaequery/honeybadger'
  c.action do |args, options|

    if !Dir.exists?(File.expand_path("~/.hak"))
      exec "mkdir ~/.hak"
    end

    if args.empty?
      repo = "uptownhr/hackathon-starter-lite"
      package_author = "uptownhr"
      package = "hackathon-starter-lite"
      puts "Pulling #{repo}"
    else
      repo = args[0]
      package_author = repo.split("/")[0]
      package = repo.split("/")[1]
    end

    exec "cd ~/.hak && rm -rf #{repo} && mkdir -p #{repo} && cd #{repo} && wget https://github.com/#{repo}/archive/master.zip && unzip master.zip && rm -f master.zip && mv #{package}-master/* . && rm -r #{package}-master"
  end
end

command :create do |c|
  c.syntax = 'hak create something.com'
  c.summary = 'downloads framework'
  c.description = ''
  c.example 'description', 'hak get jaequery/honeybadger'
  c.action do |args, options|    

    if args.empty?
      puts "ex: hak create something"
    else
      folder = args[0]

      if args[1].nil?
        repo = "jaequery/honeybadger"
      else
        repo = args[1]
      end
    end

    if !Dir.exists?(File.expand_path("~/.hak/" + repo))
      puts "#{repo} not exists, pulling"
      exec "hak pull #{repo}"
    end

    puts "copying ~/.hak/#{repo} to ./#{folder}"
    puts "now type:"
    puts "cd #{folder}"
    puts "hak up"
    exec "cp -Rfp ~/.hak/#{repo} #{folder}"

  end
end

command :on do |c|
  c.syntax = 'hak on'
  c.summary = 'powers on the hakbery server'
  c.description = 'sets up the entire docker based environment along with proxy'
  c.example 'description', 'hak on'
  c.action do |args, options|

    # if ~/.hak not exists, initialize it
    if !Dir.exists?(File.expand_path('~/.dinghy'))
      exec "mkdir -p ~/.hak/packages"
    end

    # if ~/.dinghy not exists, initialize it
    if !Dir.exists?(File.expand_path('~/.dinghy'))
      exec "mkdir ~/.hak"
      exec "brew tap codekitchen/dinghy && brew install dinghy"
      exec "brew install docker docker-machine"
    else
      exec "dinghy up"
    end
  end
end

command :off do |c|
  c.syntax = 'hak off'
  c.summary = 'shuts off hakberry server'
  c.description = 'shuts off the hakberry server'
  c.example 'description', 'hak off'
  c.action do |args, options|
    exec "dinghy halt"
  end
end

command :up do |c|
  c.syntax = 'hak up'
  c.summary = 'starts up site'
  c.description = 'this starts up the website'
  c.example 'description', 'hak up'
  c.action do |args, options|
    exec "docker-compose up -d && docker-compose logs"
  end
end

command :down do |c|
  c.syntax = 'hak down'
  c.summary = 'turn site down'
  c.description = 'turns the site down'
  c.example 'description', 'hak down'
  c.action do |args, options|
    exec "docker-compose stop"
  end
end

command :logs do |c|
  c.syntax = 'hak logs'
  c.summary = 'shows the application logs'
  c.description = ''
  c.example 'description', 'hak logs'
  c.action do |args, options|
    exec "docker-compose logs"
  end
end

command :ssh do |c|

  require 'yaml'
  require 'pp'
  file_name = 'docker-compose.yml'
  config_options = YAML.load_file(file_name)
  app = ''
  apps = []
  config_options.each do |key, value|
      apps << key
  end

  c.syntax = 'hak ssh'
  c.summary = 'ssh to your app'
  c.description = ''
  c.example 'description', 'hak ssh [app]'
  c.action do |args, options|

    if args.empty?
      puts "choose one:"
      PP.pp apps
      #app = apps[0]
    else
      app = args[0]
    end
    exec "docker-compose run #{app} bash"
  end
end
