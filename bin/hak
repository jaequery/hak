#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'yaml'
require 'pp'

program :name, 'hakberry'
program :version, '0.3.6'
program :description, 'Hak - start hacking!'

default_command :help

command :pull do |c|
  c.syntax = 'hak pull jaequery/honeybadger'
  c.summary = 'downloads framework'
  c.description = ''
  c.example 'description', 'hak pull jaequery/honeybadger'
  c.action do |args, options|

    if !Dir.exists?(File.expand_path("~/.hak"))
      system "mkdir ~/.hak"
    end

    if args.empty?
      repo = "jaequery/honeybadger"
      package_author = "jaequery"
      package = "honeybadger"
      puts "Pulling #{repo}"
    else
      repo = args[0]
      package_author = repo.split("/")[0]
      package = repo.split("/")[1]
    end

    system "cd ~/.hak && rm -rf #{repo} && mkdir -p #{repo} && cd #{repo} && wget https://github.com/#{repo}/archive/master.zip && unzip master.zip && rm -f master.zip && mv #{package}-master/* . && rm -r #{package}-master"
  end
end

command :create do |c|
  c.syntax = 'hak create something.com'
  c.summary = 'creates site'
  c.description = ''
  c.example 'description', 'hak create something.com'
  c.action do |args, options|    

    if args.empty?
      puts "ex: hak create something"
    else
      folder = args[0]

      # set default to honebadger
      if args[1].nil?
        repo = "jaequery/honeybadger"
      else
        repo = args[1]
      end

      # download package if not exist
      if !Dir.exists?(File.expand_path("~/.hak/" + repo))
        puts "#{repo} not exists, pulling"
        system "hak pull #{repo}"
      end

      # copies the package from local ~/.hak/[repo] to local folder
      puts "copying ~/.hak/#{repo} to ./#{folder}"
      system "cp -Rfp ~/.hak/#{repo} #{folder}"

      # rename virtual host to app name
      file_path = "#{folder}/docker-compose.yml"      
      file = File.open(file_path, "r+")
      content = file.read
      host = "#{folder}.docker"
      new_content = content.gsub(/VIRTUAL_HOST=(.*?)\n/, "VIRTUAL_HOST=#{host}\n")
      File.write(file_path, new_content)
      puts "set VIRTUAL_HOST of http://#{host}/"

      puts "now type:"
      puts "cd #{folder}"
      puts "hak up"

    end

  end
end

command :on do |c|
  c.syntax = 'hak on'
  c.summary = 'powers on the hak server'
  c.description = 'sets up the entire docker based environment along with proxy'
  c.example 'description', 'hak on'
  c.action do |args, options|

    # if ~/.hak not exists, initialize it
    if !Dir.exists?(File.expand_path('~/.hak'))
      system "mkdir -p ~/.hak/packages"
    end    

    # if ~/.dinghy not exists, initialize it
    if !Dir.exists?(File.expand_path('~/.dinghy'))

      # remove existing docker
      system "brew upgrade docker docker-machine"
      system "brew tap codekitchen/dinghy"
      system "brew install dinghy"
      system "brew install docker docker-machine wget"
      system "brew link --overwrite docker-machine"
      system "brew install docker-machine-driver-xhyve"
      system "sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve"
      system "sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve"
      system "dinghy create --provider xhyve"
      
      
    end

    system "eval $(dinghy env)"

    # start up
    system "dinghy up"    
  end
end

command :off do |c|
  c.syntax = 'hak off'
  c.summary = 'shuts off hak server'
  c.description = 'shuts off the hak server'
  c.example 'description', 'hak off'
  c.action do |args, options|
    system "dinghy halt"
  end
end

command :uninstall do |c|
  c.syntax = 'hak destroy'
  c.summary = 'destroys hak server'
  c.description = 'shuts off and destroys the hak server'
  c.example 'description', 'hak destroy'
  c.action do |args, options|
    system "dinghy halt"
    system "dinghy destroy"
    system "rm -rf ~/.hak"
    system "rm -rf ~/.dinghy"
  end
end

command :up do |c|
  c.syntax = 'hak up'
  c.summary = 'starts up site'
  c.description = 'this starts up the website'
  c.example 'description', 'hak up'
  c.action do |args, options|
    h_com "docker-compose up -d && docker-compose logs"
  end
end

command :down do |c|
  c.syntax = 'hak down'
  c.summary = 'turn site down'
  c.description = 'turns the site down'
  c.example 'description', 'hak down'
  c.action do |args, options|
    h_com "docker-compose stop"
  end
end

command :logs do |c|
  c.syntax = 'hak logs'
  c.summary = 'shows the application logs'
  c.description = ''
  c.example 'description', 'hak logs'
  c.action do |args, options|
    h_com "docker-compose logs"
  end
end

command :ssh do |c|
  
  c.syntax = 'hak ssh'
  c.summary = 'ssh to your app'
  c.description = ''
  c.example 'description', 'hak ssh [app]'
  c.action do |args, options|

    file_name = 'docker-compose.yml'
    config_options = YAML.load_file(file_name)
    app = ''
    apps = []
    config_options.each do |key, value|
        apps << key
    end

    if args.empty?
      puts "choose one:"
      puts apps
      #app = apps[0]
    else
      app = args[0]
      h_com "docker-compose run #{app} bash"
    end
    
  end

end

command :ps do |c|
  c.syntax = 'hak ps'
  c.summary = 'lists your running websites'
  c.description = ''
  c.example 'description', 'hak ps'
  c.action do |args, options|
    container_names = h_com('docker ps --format "{{.Names}}"', true)
    lines = container_names.lines
    sites = lines.map do | line |
      line.split('_')[0]
    end

    sites.shift

    puts "Running websites"
    puts sites.uniq
  end
end


def h_com(command, hide=false)
  exec = "eval $(dinghy env) && #{command}"

  if hide
    res = `#{exec}`
  else
    res = system exec
  end

  return res
end